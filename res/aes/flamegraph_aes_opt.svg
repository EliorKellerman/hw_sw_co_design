<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="218" onload="init(evt)" viewBox="0 0 1200 218" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="218" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record --rate 25000 --subprocesses --output res/aes/flamegraph_aes_opt.svg --format flamegraph --nonblocking -- python3 pyperformance-main/pyperformance/data-files/benchmarks/bm_crypto_pyaes/single_aes_opt.py</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="207.00"> </text><svg id="frames" x="10" width="1180" total_samples="418"><g><title>encrypt (pyaes_opt.py:206) (1 samples, 0.24%)</title><rect x="17.2249%" y="132" width="0.2392%" height="15" fill="rgb(227,0,7)" fg:x="72" fg:w="1"/><text x="17.4749%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="17.4641%" y="132" width="0.2392%" height="15" fill="rgb(217,0,24)" fg:x="73" fg:w="1"/><text x="17.7141%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:216) (1 samples, 0.24%)</title><rect x="17.7033%" y="132" width="0.2392%" height="15" fill="rgb(221,193,54)" fg:x="74" fg:w="1"/><text x="17.9533%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:218) (19 samples, 4.55%)</title><rect x="17.9426%" y="132" width="4.5455%" height="15" fill="rgb(248,212,6)" fg:x="75" fg:w="19"/><text x="18.1926%" y="142.50">encry..</text></g><g><title>encrypt (pyaes_opt.py:219) (1 samples, 0.24%)</title><rect x="22.4880%" y="132" width="0.2392%" height="15" fill="rgb(208,68,35)" fg:x="94" fg:w="1"/><text x="22.7380%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:220) (4 samples, 0.96%)</title><rect x="22.7273%" y="132" width="0.9569%" height="15" fill="rgb(232,128,0)" fg:x="95" fg:w="4"/><text x="22.9773%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="23.4450%" y="148" width="0.2392%" height="15" fill="rgb(207,160,47)" fg:x="98" fg:w="1"/><text x="23.6950%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:221) (4 samples, 0.96%)</title><rect x="23.6842%" y="132" width="0.9569%" height="15" fill="rgb(228,23,34)" fg:x="99" fg:w="4"/><text x="23.9342%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:222) (1 samples, 0.24%)</title><rect x="24.6411%" y="132" width="0.2392%" height="15" fill="rgb(218,30,26)" fg:x="103" fg:w="1"/><text x="24.8911%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:224) (5 samples, 1.20%)</title><rect x="24.8804%" y="132" width="1.1962%" height="15" fill="rgb(220,122,19)" fg:x="104" fg:w="5"/><text x="25.1304%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:225) (6 samples, 1.44%)</title><rect x="26.0766%" y="132" width="1.4354%" height="15" fill="rgb(250,228,42)" fg:x="109" fg:w="6"/><text x="26.3266%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:226) (5 samples, 1.20%)</title><rect x="27.5120%" y="132" width="1.1962%" height="15" fill="rgb(240,193,28)" fg:x="115" fg:w="5"/><text x="27.7620%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="28.4689%" y="148" width="0.2392%" height="15" fill="rgb(216,20,37)" fg:x="119" fg:w="1"/><text x="28.7189%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:227) (3 samples, 0.72%)</title><rect x="28.7081%" y="132" width="0.7177%" height="15" fill="rgb(206,188,39)" fg:x="120" fg:w="3"/><text x="28.9581%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="29.1866%" y="148" width="0.2392%" height="15" fill="rgb(217,207,13)" fg:x="122" fg:w="1"/><text x="29.4366%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:228) (3 samples, 0.72%)</title><rect x="29.4258%" y="132" width="0.7177%" height="15" fill="rgb(231,73,38)" fg:x="123" fg:w="3"/><text x="29.6758%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:230) (12 samples, 2.87%)</title><rect x="30.1435%" y="132" width="2.8708%" height="15" fill="rgb(225,20,46)" fg:x="126" fg:w="12"/><text x="30.3935%" y="142.50">en..</text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="32.7751%" y="148" width="0.2392%" height="15" fill="rgb(210,31,41)" fg:x="137" fg:w="1"/><text x="33.0251%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:231) (5 samples, 1.20%)</title><rect x="33.0144%" y="132" width="1.1962%" height="15" fill="rgb(221,200,47)" fg:x="138" fg:w="5"/><text x="33.2644%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="33.9713%" y="148" width="0.2392%" height="15" fill="rgb(226,26,5)" fg:x="142" fg:w="1"/><text x="34.2213%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:232) (7 samples, 1.67%)</title><rect x="34.2105%" y="132" width="1.6746%" height="15" fill="rgb(249,33,26)" fg:x="143" fg:w="7"/><text x="34.4605%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="35.6459%" y="148" width="0.2392%" height="15" fill="rgb(235,183,28)" fg:x="149" fg:w="1"/><text x="35.8959%" y="158.50"></text></g><g><title>_compact_word (pyaes_opt.py:62) (1 samples, 0.24%)</title><rect x="35.6459%" y="164" width="0.2392%" height="15" fill="rgb(221,5,38)" fg:x="149" fg:w="1"/><text x="35.8959%" y="174.50"></text></g><g><title>encrypt (pyaes_opt.py:233) (6 samples, 1.44%)</title><rect x="35.8852%" y="132" width="1.4354%" height="15" fill="rgb(247,18,42)" fg:x="150" fg:w="6"/><text x="36.1352%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="37.0813%" y="148" width="0.2392%" height="15" fill="rgb(241,131,45)" fg:x="155" fg:w="1"/><text x="37.3313%" y="158.50"></text></g><g><title>_compact_word (pyaes_opt.py:62) (1 samples, 0.24%)</title><rect x="37.0813%" y="164" width="0.2392%" height="15" fill="rgb(249,31,29)" fg:x="155" fg:w="1"/><text x="37.3313%" y="174.50"></text></g><g><title>encrypt (pyaes_opt.py:234) (1 samples, 0.24%)</title><rect x="37.3206%" y="132" width="0.2392%" height="15" fill="rgb(225,111,53)" fg:x="156" fg:w="1"/><text x="37.5706%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:236) (9 samples, 2.15%)</title><rect x="37.5598%" y="132" width="2.1531%" height="15" fill="rgb(238,160,17)" fg:x="157" fg:w="9"/><text x="37.8098%" y="142.50">e..</text></g><g><title>encrypt (pyaes_opt.py:237) (4 samples, 0.96%)</title><rect x="39.7129%" y="132" width="0.9569%" height="15" fill="rgb(214,148,48)" fg:x="166" fg:w="4"/><text x="39.9629%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="40.4306%" y="148" width="0.2392%" height="15" fill="rgb(232,36,49)" fg:x="169" fg:w="1"/><text x="40.6806%" y="158.50"></text></g><g><title>_compact_word (pyaes_opt.py:62) (1 samples, 0.24%)</title><rect x="40.4306%" y="164" width="0.2392%" height="15" fill="rgb(209,103,24)" fg:x="169" fg:w="1"/><text x="40.6806%" y="174.50"></text></g><g><title>encrypt (pyaes_opt.py:238) (5 samples, 1.20%)</title><rect x="40.6699%" y="132" width="1.1962%" height="15" fill="rgb(229,88,8)" fg:x="170" fg:w="5"/><text x="40.9199%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="41.6268%" y="148" width="0.2392%" height="15" fill="rgb(213,181,19)" fg:x="174" fg:w="1"/><text x="41.8768%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:239) (5 samples, 1.20%)</title><rect x="41.8660%" y="132" width="1.1962%" height="15" fill="rgb(254,191,54)" fg:x="175" fg:w="5"/><text x="42.1160%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:240) (4 samples, 0.96%)</title><rect x="43.0622%" y="132" width="0.9569%" height="15" fill="rgb(241,83,37)" fg:x="180" fg:w="4"/><text x="43.3122%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="43.7799%" y="148" width="0.2392%" height="15" fill="rgb(233,36,39)" fg:x="183" fg:w="1"/><text x="44.0299%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:242) (1 samples, 0.24%)</title><rect x="44.0191%" y="132" width="0.2392%" height="15" fill="rgb(226,3,54)" fg:x="184" fg:w="1"/><text x="44.2691%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:245) (1 samples, 0.24%)</title><rect x="44.2584%" y="132" width="0.2392%" height="15" fill="rgb(245,192,40)" fg:x="185" fg:w="1"/><text x="44.5084%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:247) (1 samples, 0.24%)</title><rect x="44.4976%" y="132" width="0.2392%" height="15" fill="rgb(238,167,29)" fg:x="186" fg:w="1"/><text x="44.7476%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:248) (1 samples, 0.24%)</title><rect x="44.7368%" y="132" width="0.2392%" height="15" fill="rgb(232,182,51)" fg:x="187" fg:w="1"/><text x="44.9868%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:249) (1 samples, 0.24%)</title><rect x="44.9761%" y="132" width="0.2392%" height="15" fill="rgb(231,60,39)" fg:x="188" fg:w="1"/><text x="45.2261%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:251) (1 samples, 0.24%)</title><rect x="45.2153%" y="132" width="0.2392%" height="15" fill="rgb(208,69,12)" fg:x="189" fg:w="1"/><text x="45.4653%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:254) (1 samples, 0.24%)</title><rect x="45.4545%" y="132" width="0.2392%" height="15" fill="rgb(235,93,37)" fg:x="190" fg:w="1"/><text x="45.7045%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:255) (1 samples, 0.24%)</title><rect x="45.6938%" y="132" width="0.2392%" height="15" fill="rgb(213,116,39)" fg:x="191" fg:w="1"/><text x="45.9438%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:256) (1 samples, 0.24%)</title><rect x="45.9330%" y="132" width="0.2392%" height="15" fill="rgb(222,207,29)" fg:x="192" fg:w="1"/><text x="46.1830%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:257) (1 samples, 0.24%)</title><rect x="46.1722%" y="132" width="0.2392%" height="15" fill="rgb(206,96,30)" fg:x="193" fg:w="1"/><text x="46.4222%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:262) (1 samples, 0.24%)</title><rect x="46.4115%" y="132" width="0.2392%" height="15" fill="rgb(218,138,4)" fg:x="194" fg:w="1"/><text x="46.6615%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:266) (3 samples, 0.72%)</title><rect x="46.6507%" y="132" width="0.7177%" height="15" fill="rgb(250,191,14)" fg:x="195" fg:w="3"/><text x="46.9007%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:267) (2 samples, 0.48%)</title><rect x="47.3684%" y="132" width="0.4785%" height="15" fill="rgb(239,60,40)" fg:x="198" fg:w="2"/><text x="47.6184%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:268) (2 samples, 0.48%)</title><rect x="47.8469%" y="132" width="0.4785%" height="15" fill="rgb(206,27,48)" fg:x="200" fg:w="2"/><text x="48.0969%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:269) (1 samples, 0.24%)</title><rect x="48.3254%" y="132" width="0.2392%" height="15" fill="rgb(225,35,8)" fg:x="202" fg:w="1"/><text x="48.5754%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:271) (6 samples, 1.44%)</title><rect x="48.5646%" y="132" width="1.4354%" height="15" fill="rgb(250,213,24)" fg:x="203" fg:w="6"/><text x="48.8146%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:603) (145 samples, 34.69%)</title><rect x="16.2679%" y="116" width="34.6890%" height="15" fill="rgb(247,123,22)" fg:x="68" fg:w="145"/><text x="16.5179%" y="126.50">encrypt (pyaes_opt.py:603)</text></g><g><title>increment (pyaes_opt.py:327) (4 samples, 0.96%)</title><rect x="50.0000%" y="132" width="0.9569%" height="15" fill="rgb(231,138,38)" fg:x="209" fg:w="4"/><text x="50.2500%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:230) (2 samples, 0.48%)</title><rect x="50.9569%" y="132" width="0.4785%" height="15" fill="rgb(231,145,46)" fg:x="213" fg:w="2"/><text x="51.2069%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:604) (3 samples, 0.72%)</title><rect x="50.9569%" y="116" width="0.7177%" height="15" fill="rgb(251,118,11)" fg:x="213" fg:w="3"/><text x="51.2069%" y="126.50"></text></g><g><title>encrypt (pyaes_opt.py:233) (1 samples, 0.24%)</title><rect x="51.4354%" y="132" width="0.2392%" height="15" fill="rgb(217,147,25)" fg:x="215" fg:w="1"/><text x="51.6854%" y="142.50"></text></g><g><title>bench_pyaes (single_aes_opt.py:19) (154 samples, 36.84%)</title><rect x="16.2679%" y="100" width="36.8421%" height="15" fill="rgb(247,81,37)" fg:x="68" fg:w="154"/><text x="16.5179%" y="110.50">bench_pyaes (single_aes_opt.py:19)</text></g><g><title>encrypt (pyaes_opt.py:608) (6 samples, 1.44%)</title><rect x="51.6746%" y="116" width="1.4354%" height="15" fill="rgb(209,12,38)" fg:x="216" fg:w="6"/><text x="51.9246%" y="126.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:608) (6 samples, 1.44%)</title><rect x="51.6746%" y="132" width="1.4354%" height="15" fill="rgb(227,1,9)" fg:x="216" fg:w="6"/><text x="51.9246%" y="142.50"></text></g><g><title>bench_pyaes (single_aes_opt.py:22) (1 samples, 0.24%)</title><rect x="53.1100%" y="100" width="0.2392%" height="15" fill="rgb(248,47,43)" fg:x="222" fg:w="1"/><text x="53.3600%" y="110.50"></text></g><g><title>__init__ (pyaes_opt.py:593) (1 samples, 0.24%)</title><rect x="53.1100%" y="116" width="0.2392%" height="15" fill="rgb(221,10,30)" fg:x="222" fg:w="1"/><text x="53.3600%" y="126.50"></text></g><g><title>__init__ (pyaes_opt.py:340) (1 samples, 0.24%)</title><rect x="53.1100%" y="132" width="0.2392%" height="15" fill="rgb(210,229,1)" fg:x="222" fg:w="1"/><text x="53.3600%" y="142.50"></text></g><g><title>__init__ (pyaes_opt.py:161) (1 samples, 0.24%)</title><rect x="53.1100%" y="148" width="0.2392%" height="15" fill="rgb(222,148,37)" fg:x="222" fg:w="1"/><text x="53.3600%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:142) (1 samples, 0.24%)</title><rect x="53.1100%" y="164" width="0.2392%" height="15" fill="rgb(234,67,33)" fg:x="222" fg:w="1"/><text x="53.3600%" y="174.50"></text></g><g><title>encrypt (pyaes_opt.py:602) (1 samples, 0.24%)</title><rect x="53.3493%" y="132" width="0.2392%" height="15" fill="rgb(247,98,35)" fg:x="223" fg:w="1"/><text x="53.5993%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:236) (1 samples, 0.24%)</title><rect x="53.3493%" y="148" width="0.2392%" height="15" fill="rgb(247,138,52)" fg:x="223" fg:w="1"/><text x="53.5993%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:213) (4 samples, 0.96%)</title><rect x="54.5455%" y="148" width="0.9569%" height="15" fill="rgb(213,79,30)" fg:x="228" fg:w="4"/><text x="54.7955%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:218) (7 samples, 1.67%)</title><rect x="55.5024%" y="148" width="1.6746%" height="15" fill="rgb(246,177,23)" fg:x="232" fg:w="7"/><text x="55.7524%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="56.9378%" y="164" width="0.2392%" height="15" fill="rgb(230,62,27)" fg:x="238" fg:w="1"/><text x="57.1878%" y="174.50"></text></g><g><title>encrypt (pyaes_opt.py:219) (6 samples, 1.44%)</title><rect x="57.1770%" y="148" width="1.4354%" height="15" fill="rgb(216,154,8)" fg:x="239" fg:w="6"/><text x="57.4270%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="58.3732%" y="164" width="0.2392%" height="15" fill="rgb(244,35,45)" fg:x="244" fg:w="1"/><text x="58.6232%" y="174.50"></text></g><g><title>encrypt (pyaes_opt.py:220) (12 samples, 2.87%)</title><rect x="58.6124%" y="148" width="2.8708%" height="15" fill="rgb(251,115,12)" fg:x="245" fg:w="12"/><text x="58.8624%" y="158.50">en..</text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="61.2440%" y="164" width="0.2392%" height="15" fill="rgb(240,54,50)" fg:x="256" fg:w="1"/><text x="61.4940%" y="174.50"></text></g><g><title>_compact_word (pyaes_opt.py:62) (1 samples, 0.24%)</title><rect x="61.2440%" y="180" width="0.2392%" height="15" fill="rgb(233,84,52)" fg:x="256" fg:w="1"/><text x="61.4940%" y="190.50"></text></g><g><title>encrypt (pyaes_opt.py:221) (8 samples, 1.91%)</title><rect x="61.4833%" y="148" width="1.9139%" height="15" fill="rgb(207,117,47)" fg:x="257" fg:w="8"/><text x="61.7333%" y="158.50">e..</text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (2 samples, 0.48%)</title><rect x="62.9187%" y="164" width="0.4785%" height="15" fill="rgb(249,43,39)" fg:x="263" fg:w="2"/><text x="63.1687%" y="174.50"></text></g><g><title>_compact_word (pyaes_opt.py:62) (1 samples, 0.24%)</title><rect x="63.1579%" y="180" width="0.2392%" height="15" fill="rgb(209,38,44)" fg:x="264" fg:w="1"/><text x="63.4079%" y="190.50"></text></g><g><title>encrypt (pyaes_opt.py:222) (3 samples, 0.72%)</title><rect x="63.3971%" y="148" width="0.7177%" height="15" fill="rgb(236,212,23)" fg:x="265" fg:w="3"/><text x="63.6471%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="63.8756%" y="164" width="0.2392%" height="15" fill="rgb(242,79,21)" fg:x="267" fg:w="1"/><text x="64.1256%" y="174.50"></text></g><g><title>encrypt (pyaes_opt.py:224) (13 samples, 3.11%)</title><rect x="64.1148%" y="148" width="3.1100%" height="15" fill="rgb(211,96,35)" fg:x="268" fg:w="13"/><text x="64.3648%" y="158.50">enc..</text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="66.9856%" y="164" width="0.2392%" height="15" fill="rgb(253,215,40)" fg:x="280" fg:w="1"/><text x="67.2356%" y="174.50"></text></g><g><title>encrypt (pyaes_opt.py:225) (4 samples, 0.96%)</title><rect x="67.2249%" y="148" width="0.9569%" height="15" fill="rgb(211,81,21)" fg:x="281" fg:w="4"/><text x="67.4749%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:226) (7 samples, 1.67%)</title><rect x="68.1818%" y="148" width="1.6746%" height="15" fill="rgb(208,190,38)" fg:x="285" fg:w="7"/><text x="68.4318%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="69.6172%" y="164" width="0.2392%" height="15" fill="rgb(235,213,38)" fg:x="291" fg:w="1"/><text x="69.8672%" y="174.50"></text></g><g><title>encrypt (pyaes_opt.py:227) (5 samples, 1.20%)</title><rect x="69.8565%" y="148" width="1.1962%" height="15" fill="rgb(237,122,38)" fg:x="292" fg:w="5"/><text x="70.1065%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:228) (1 samples, 0.24%)</title><rect x="71.0526%" y="148" width="0.2392%" height="15" fill="rgb(244,218,35)" fg:x="297" fg:w="1"/><text x="71.3026%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:230) (14 samples, 3.35%)</title><rect x="71.2919%" y="148" width="3.3493%" height="15" fill="rgb(240,68,47)" fg:x="298" fg:w="14"/><text x="71.5419%" y="158.50">enc..</text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="74.4019%" y="164" width="0.2392%" height="15" fill="rgb(210,16,53)" fg:x="311" fg:w="1"/><text x="74.6519%" y="174.50"></text></g><g><title>_compact_word (pyaes_opt.py:62) (1 samples, 0.24%)</title><rect x="74.4019%" y="180" width="0.2392%" height="15" fill="rgb(235,124,12)" fg:x="311" fg:w="1"/><text x="74.6519%" y="190.50"></text></g><g><title>encrypt (pyaes_opt.py:231) (7 samples, 1.67%)</title><rect x="74.6411%" y="148" width="1.6746%" height="15" fill="rgb(224,169,11)" fg:x="312" fg:w="7"/><text x="74.8911%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:232) (4 samples, 0.96%)</title><rect x="76.3158%" y="148" width="0.9569%" height="15" fill="rgb(250,166,2)" fg:x="319" fg:w="4"/><text x="76.5658%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:233) (5 samples, 1.20%)</title><rect x="77.2727%" y="148" width="1.1962%" height="15" fill="rgb(242,216,29)" fg:x="323" fg:w="5"/><text x="77.5227%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:234) (1 samples, 0.24%)</title><rect x="78.4689%" y="148" width="0.2392%" height="15" fill="rgb(230,116,27)" fg:x="328" fg:w="1"/><text x="78.7189%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:236) (12 samples, 2.87%)</title><rect x="78.7081%" y="148" width="2.8708%" height="15" fill="rgb(228,99,48)" fg:x="329" fg:w="12"/><text x="78.9581%" y="158.50">en..</text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="81.3397%" y="164" width="0.2392%" height="15" fill="rgb(253,11,6)" fg:x="340" fg:w="1"/><text x="81.5897%" y="174.50"></text></g><g><title>encrypt (pyaes_opt.py:237) (4 samples, 0.96%)</title><rect x="81.5789%" y="148" width="0.9569%" height="15" fill="rgb(247,143,39)" fg:x="341" fg:w="4"/><text x="81.8289%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (2 samples, 0.48%)</title><rect x="82.0574%" y="164" width="0.4785%" height="15" fill="rgb(236,97,10)" fg:x="343" fg:w="2"/><text x="82.3074%" y="174.50"></text></g><g><title>_compact_word (pyaes_opt.py:62) (1 samples, 0.24%)</title><rect x="82.2967%" y="180" width="0.2392%" height="15" fill="rgb(233,208,19)" fg:x="344" fg:w="1"/><text x="82.5467%" y="190.50"></text></g><g><title>encrypt (pyaes_opt.py:238) (10 samples, 2.39%)</title><rect x="82.5359%" y="148" width="2.3923%" height="15" fill="rgb(216,164,2)" fg:x="345" fg:w="10"/><text x="82.7859%" y="158.50">en..</text></g><g><title>encrypt (pyaes_opt.py:239) (4 samples, 0.96%)</title><rect x="84.9282%" y="148" width="0.9569%" height="15" fill="rgb(220,129,5)" fg:x="355" fg:w="4"/><text x="85.1782%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:240) (2 samples, 0.48%)</title><rect x="85.8852%" y="148" width="0.4785%" height="15" fill="rgb(242,17,10)" fg:x="359" fg:w="2"/><text x="86.1352%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:213) (1 samples, 0.24%)</title><rect x="86.1244%" y="164" width="0.2392%" height="15" fill="rgb(242,107,0)" fg:x="360" fg:w="1"/><text x="86.3744%" y="174.50"></text></g><g><title>encrypt (pyaes_opt.py:242) (1 samples, 0.24%)</title><rect x="86.3636%" y="148" width="0.2392%" height="15" fill="rgb(251,28,31)" fg:x="361" fg:w="1"/><text x="86.6136%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:248) (1 samples, 0.24%)</title><rect x="86.6029%" y="148" width="0.2392%" height="15" fill="rgb(233,223,10)" fg:x="362" fg:w="1"/><text x="86.8529%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:249) (1 samples, 0.24%)</title><rect x="86.8421%" y="148" width="0.2392%" height="15" fill="rgb(215,21,27)" fg:x="363" fg:w="1"/><text x="87.0921%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:250) (2 samples, 0.48%)</title><rect x="87.0813%" y="148" width="0.4785%" height="15" fill="rgb(232,23,21)" fg:x="364" fg:w="2"/><text x="87.3313%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:251) (3 samples, 0.72%)</title><rect x="87.5598%" y="148" width="0.7177%" height="15" fill="rgb(244,5,23)" fg:x="366" fg:w="3"/><text x="87.8098%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:254) (2 samples, 0.48%)</title><rect x="88.2775%" y="148" width="0.4785%" height="15" fill="rgb(226,81,46)" fg:x="369" fg:w="2"/><text x="88.5275%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:255) (5 samples, 1.20%)</title><rect x="88.7560%" y="148" width="1.1962%" height="15" fill="rgb(247,70,30)" fg:x="371" fg:w="5"/><text x="89.0060%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:256) (2 samples, 0.48%)</title><rect x="89.9522%" y="148" width="0.4785%" height="15" fill="rgb(212,68,19)" fg:x="376" fg:w="2"/><text x="90.2022%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:257) (2 samples, 0.48%)</title><rect x="90.4306%" y="148" width="0.4785%" height="15" fill="rgb(240,187,13)" fg:x="378" fg:w="2"/><text x="90.6806%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:260) (1 samples, 0.24%)</title><rect x="90.9091%" y="148" width="0.2392%" height="15" fill="rgb(223,113,26)" fg:x="380" fg:w="1"/><text x="91.1591%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:261) (2 samples, 0.48%)</title><rect x="91.1483%" y="148" width="0.4785%" height="15" fill="rgb(206,192,2)" fg:x="381" fg:w="2"/><text x="91.3983%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:262) (6 samples, 1.44%)</title><rect x="91.6268%" y="148" width="1.4354%" height="15" fill="rgb(241,108,4)" fg:x="383" fg:w="6"/><text x="91.8768%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:263) (1 samples, 0.24%)</title><rect x="93.0622%" y="148" width="0.2392%" height="15" fill="rgb(247,173,49)" fg:x="389" fg:w="1"/><text x="93.3122%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:266) (3 samples, 0.72%)</title><rect x="93.3014%" y="148" width="0.7177%" height="15" fill="rgb(224,114,35)" fg:x="390" fg:w="3"/><text x="93.5514%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:267) (3 samples, 0.72%)</title><rect x="94.0191%" y="148" width="0.7177%" height="15" fill="rgb(245,159,27)" fg:x="393" fg:w="3"/><text x="94.2691%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:268) (1 samples, 0.24%)</title><rect x="94.7368%" y="148" width="0.2392%" height="15" fill="rgb(245,172,44)" fg:x="396" fg:w="1"/><text x="94.9868%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:269) (1 samples, 0.24%)</title><rect x="94.9761%" y="148" width="0.2392%" height="15" fill="rgb(236,23,11)" fg:x="397" fg:w="1"/><text x="95.2261%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:271) (8 samples, 1.91%)</title><rect x="95.2153%" y="148" width="1.9139%" height="15" fill="rgb(205,117,38)" fg:x="398" fg:w="8"/><text x="95.4653%" y="158.50">e..</text></g><g><title>encrypt (pyaes_opt.py:603) (185 samples, 44.26%)</title><rect x="53.5885%" y="132" width="44.2584%" height="15" fill="rgb(237,72,25)" fg:x="224" fg:w="185"/><text x="53.8385%" y="142.50">encrypt (pyaes_opt.py:603)</text></g><g><title>increment (pyaes_opt.py:327) (3 samples, 0.72%)</title><rect x="97.1292%" y="148" width="0.7177%" height="15" fill="rgb(244,70,9)" fg:x="406" fg:w="3"/><text x="97.3792%" y="158.50"></text></g><g><title>encrypt (pyaes_opt.py:604) (3 samples, 0.72%)</title><rect x="97.8469%" y="132" width="0.7177%" height="15" fill="rgb(217,125,39)" fg:x="409" fg:w="3"/><text x="98.0969%" y="142.50"></text></g><g><title>encrypt (pyaes_opt.py:238) (2 samples, 0.48%)</title><rect x="98.0861%" y="148" width="0.4785%" height="15" fill="rgb(235,36,10)" fg:x="410" fg:w="2"/><text x="98.3361%" y="158.50"></text></g><g><title>all (418 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="418"/><text x="0.2500%" y="62.50"></text></g><g><title>process 1377814:&quot;python3 pyperformance-main/pyperformance/data-files/benchmarks/bm_crypto_pyaes/single_aes_opt.py&quot; (418 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="418"/><text x="0.2500%" y="78.50">process 1377814:&quot;python3 pyperformance-main/pyperformance/data-files/benchmarks/bm_crypto_pyaes/single_aes_opt.py&quot;</text></g><g><title>&lt;module&gt; (single_aes_opt.py:32) (350 samples, 83.73%)</title><rect x="16.2679%" y="84" width="83.7321%" height="15" fill="rgb(238,131,9)" fg:x="68" fg:w="350"/><text x="16.5179%" y="94.50">&lt;module&gt; (single_aes_opt.py:32)</text></g><g><title>bench_pyaes (single_aes_opt.py:23) (195 samples, 46.65%)</title><rect x="53.3493%" y="100" width="46.6507%" height="15" fill="rgb(211,50,8)" fg:x="223" fg:w="195"/><text x="53.5993%" y="110.50">bench_pyaes (single_aes_opt.py:23)</text></g><g><title>decrypt (pyaes_opt.py:615) (195 samples, 46.65%)</title><rect x="53.3493%" y="116" width="46.6507%" height="15" fill="rgb(245,182,24)" fg:x="223" fg:w="195"/><text x="53.5993%" y="126.50">decrypt (pyaes_opt.py:615)</text></g><g><title>encrypt (pyaes_opt.py:608) (6 samples, 1.44%)</title><rect x="98.5646%" y="132" width="1.4354%" height="15" fill="rgb(242,14,37)" fg:x="412" fg:w="6"/><text x="98.8146%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (pyaes_opt.py:608) (6 samples, 1.44%)</title><rect x="98.5646%" y="148" width="1.4354%" height="15" fill="rgb(246,228,12)" fg:x="412" fg:w="6"/><text x="98.8146%" y="158.50"></text></g></svg></svg>